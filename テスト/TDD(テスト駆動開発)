# TDD(テスト駆動開発)とは
・Test - Driven - Development
・プログラミングに必要な各機能について、最初にテストを書き、そのテストが動作する最低限な実装をとりあえず行ったあと、コードを洗練させる
・レッドー＞グリーンー＞リファクタリングのループ

# TDDの目的（ゴール）
綺麗な実装でちゃんと動くソースコードを書く

## ゴールまでの道のり
1.綺麗に設計ー＞ちゃんと動くところまで持っていく
2.ちゃんと動くところまで持っていく ー＞綺麗に実装する

##問題点
1.綺麗に設計ー＞ちゃんと動くところまで持っていく

・アーキテクチャ、クラスデザインパターン、メソッド名、引数名まで決める
ー＞ちゃんと動くのか？
ー＞行き過ぎた設計配慮ではないか？
ー＞動いたとしてもパフォーマンスが悪いのでは？

上記のことを考えると見直し再構築の作業が多く発生する。

2.ちゃんと動くところまで持っていく ー＞綺麗に実装する

・実装はどうあれ目的の動作をする＝成果物として正常かつ正解である状態になる
ー＞動くから綺麗にならなくてもいい(堕落)
ー＞動いているから下手に改変したくない(恐怖)

上記のことを考えると、堕落や恐怖でリファクタリングができない。

##TDDだと
